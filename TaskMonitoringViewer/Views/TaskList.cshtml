@using SKBKontur.Catalogue.Core.Web.Blocks.ActionButton
@using SKBKontur.Catalogue.Core.Web.Blocks.AdminTools.AdminTaskState
@using SKBKontur.Catalogue.Core.Web.Blocks.AdminTools.AdminToolsData
@using SKBKontur.Catalogue.Core.Web.Blocks.AdminTools.AdminToolsHeader
@using SKBKontur.Catalogue.Core.Web.RenderingHelpers
@using SKBKontur.Catalogue.RemoteTaskQueue.TaskMonitoringViewer.RenderingHelpers
@model SKBKontur.Catalogue.RemoteTaskQueue.TaskMonitoringViewer.Models.TaskList.TaskListPageModel
@{
    var htmlModel = Model.HtmlModel;
    Layout = "TaskMonitoringLayout.cshtml";
}
@* ReSharper disable Razor.SectionNotResolved *@
@section Title {
Очередь задач
}
@* ReSharper restore Razor.SectionNotResolved *@
@section Scripts{
    var PageOptions = @Html.Raw(Model.GetPageOptions());
    $(document).ready(function() {
    var pageController = new Page("AdminTools","RemoteTaskQueue");
    pageController.run();
    });
}
@Html.AdminToolsHeader(new AdminToolsHeaderHtmlModel
    {
        Text = "Список задач",
        BackText = "вернуться к инструментам администратора",
        BackUrl = "/AdminTools"
    })
@{
    var searchPanelModel = htmlModel.SearchPanel;
}
<div class="adminTools__filters slide element slide__hide">
    <div class="slide_title_link disableSelection adminTools_filter_showHideLink">
        <a href="#" class="slide_title_link_link dottedLink t-pseudoLink">Показать/скрыть фильтры</a>
    </div>
    <div class="slide_listWrap" style="display: none;">
        <div class="adminTools__filter">
            <div class="adminTools__filter__label">State</div>
            <div class="adminTools__filter__field">
                @foreach (var taskState in searchPanelModel.TaskStates)
                {
                    <div class="adminTools__filter__field__items">
                        @Html.Input(taskState.Value)
                        @Html.Checkbox(taskState.CheckBox)
                    </div>
                }
            </div>
        </div>
        <div class="adminTools__filter">
            <div class="adminTools__filter__label">TaskId</div>
            <div class="adminTools__filter__field adminTools__filter__field_type_big">@Html.Input(searchPanelModel.TaskId)</div>
        </div>
        <div class="adminTools__filter">
            <div class="adminTools__filter__label">ParentTaskId</div>
            <div class="adminTools__filter__field adminTools__filter__field_type_big">@Html.Input(searchPanelModel.ParentTaskId)</div>
        </div>
        <div class="adminTools__filter">
            <div class="adminTools__filter__label">TaskName</div>
            <div class="adminTools__filter__field">

                @foreach (var taskName in searchPanelModel.TaskNames)
                {
                    <div class="adminTools__filter__field__items">
                        @Html.Input(taskName.Value)
                        @Html.Checkbox(taskName.CheckBox)
                    </div>
                }
            </div>
        </div>

        <div class="adminTools__filter">
            <div class="adminTools__filter__label">Ticks From</div>
            <div class="adminTools__filter__field">@Html.DateAndTime(searchPanelModel.Ticks.From)</div>
            <div class="adminTools__filter__label">Ticks To</div>
            <div class="adminTools__filter__field">@Html.DateAndTime(searchPanelModel.Ticks.To)</div>
        </div>
        <div class="adminTools__filter">
            <div class="adminTools__filter__label">StartExecutedTicks From</div>
            <div class="adminTools__filter__field">@Html.DateAndTime(searchPanelModel.StartExecutedTicks.From)</div>
            <div class="adminTools__filter__label">StartExecutedTicks To</div>
            <div class="adminTools__filter__field">@Html.DateAndTime(searchPanelModel.StartExecutedTicks.To)</div>
        </div>
        <div class="adminTools__filter">
            <div class="adminTools__filter__label">FinishExecutedTicks From</div>
            <div class="adminTools__filter__field">@Html.DateAndTime(searchPanelModel.FinishExecutedTicks.From)</div>
            <div class="adminTools__filter__label">FinishExecutedTicks To</div>
            <div class="adminTools__filter__field">@Html.DateAndTime(searchPanelModel.FinishExecutedTicks.To)</div>
        </div>
        <div class="adminTools__filter">
            <div class="adminTools__filter__label">MinimalStartTicks From</div>
            <div class="adminTools__filter__field">@Html.DateAndTime(searchPanelModel.MinimalStartTicks.From)</div>
            <div class="adminTools__filter__label">MinimalStartTicks To</div>
            <div class="adminTools__filter__field">@Html.DateAndTime(searchPanelModel.MinimalStartTicks.To)</div>
        </div>
    </div>
</div>

<div class="adminTools__button">@Html.ActionButton(searchPanelModel.SearchButton)</div>
<div class="adminTools__filters__count">
    <span class="adminTools__filters__count__content">Найдено: @Html.Text(htmlModel.TaskCount)</span>
    <a class="monitor-link" href="@Url.Action("FullScreenTaskCount", "RemoteTaskQueue", new { id = Model.PaginatorModelData.SearchRequestId })" target="_blank">Отслеживать результаты на отдельном экране</a>
</div>


<table class="adminTools__data">
    <tr>
        @Html.AdminToolsDataHeader(new AdminToolsDataHeaderHtmlModel { Header = "TaskId" })
        @Html.AdminToolsDataHeader(new AdminToolsDataHeaderHtmlModel { Header = "TaskState" })
        @Html.AdminToolsDataHeader(new AdminToolsDataHeaderHtmlModel { Header = "TaskName" })
        @Html.AdminToolsDataHeader(new AdminToolsDataHeaderHtmlModel { Header = "EnqueueTime" })
        @Html.AdminToolsDataHeader(new AdminToolsDataHeaderHtmlModel { Header = "StartExecutingTime" })
        @Html.AdminToolsDataHeader(new AdminToolsDataHeaderHtmlModel { Header = "FinishExecutingTime" })
        @Html.AdminToolsDataHeader(new AdminToolsDataHeaderHtmlModel { Header = "MinimalStartTime" })
        @Html.AdminToolsDataHeader(new AdminToolsDataHeaderHtmlModel { Header = "Attempts" })
        @Html.AdminToolsDataHeader(new AdminToolsDataHeaderHtmlModel { Header = "ParentTaskId", IsLast = true })
    </tr>
    @{
        foreach (var taskModel in htmlModel.Tasks)
        {
        <tr class="adminTools__data__item @AdminToolsData.GetStateClass(taskModel.TaskState.Value.ToString())">
            @Html.AdminToolsDataCol(new AdminToolsDataColHtmlModel { Text = taskModel.TaskId.Value, Id = taskModel.TaskId.Id, Url = taskModel.TaskId.GetDetailsUrl(Url) })
            @Html.AdminToolsDataCol(new AdminToolsDataColHtmlModel
                    {
                        State = new AdminTaskStateHtmlModel
                            {
                                Id = taskModel.TaskState.Id,
                                CancelUrl = taskModel.TaskState.GetCancelUrl(Url),
                                RerunUrl = taskModel.TaskState.GetRerunUrl(Url),
                                State = taskModel.TaskState.Value.ToString(),
                                CanCancel = taskModel.TaskState.CanCancel
                            }
                    })
            @Html.AdminToolsDataCol(new AdminToolsDataColHtmlModel { Field = taskModel.TaskName })
            @Html.AdminToolsDataCol(new AdminToolsDataColHtmlModel { Field = taskModel.EnqueueTime })
            @Html.AdminToolsDataCol(new AdminToolsDataColHtmlModel { Field = taskModel.StartExecutingTime })
            @Html.AdminToolsDataCol(new AdminToolsDataColHtmlModel { Field = taskModel.FinishExecutingTime })
            @Html.AdminToolsDataCol(new AdminToolsDataColHtmlModel { Field = taskModel.MinimalStartTime })
            @Html.AdminToolsDataCol(new AdminToolsDataColHtmlModel { Field = taskModel.Attempts })
            @Html.AdminToolsDataCol(new AdminToolsDataColHtmlModel { Text = taskModel.ParentTaskId.Value, Id = taskModel.ParentTaskId.Id, Url = taskModel.ParentTaskId.GetDetailsUrl(Url) })
        </tr>
        }
    }
</table>
<div class="adminTools__paginator">
    @Html.Paginator(Model.PaginatorModelData)
</div>
