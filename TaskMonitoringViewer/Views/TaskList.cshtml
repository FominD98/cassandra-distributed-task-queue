@using SKBKontur.Catalogue.Core.Web.Blocks.ActionButton
@using SKBKontur.Catalogue.RemoteTaskQueue.TaskMonitoringViewer.RenderingHelpers
@using SKBKontur.Catalogue.Core.Web.RenderingHelpers
@using SKBKontur.Catalogue.RemoteTaskQueue.TaskMonitoringViewer.Models.TaskList
@using SKBKontur.Catalogue.RemoteTaskQueue.TaskMonitoringViewer
@model TaskListPageModel
@{
    var htmlModel = Model.HtmlModel;
    Layout = "TaskMonitoringLayout.cshtml";
}
@* ReSharper disable Razor.SectionNotResolved *@
@section Title {
    Task list
}
@* ReSharper restore Razor.SectionNotResolved *@
@section Scripts{
    var PageOptions = {
    functions: @Html.Raw(Model.GetJSFunctions())
    };
    $(document).ready(function() {
    var pageController = new Page("AdminTools","RemoteTaskQueue");
    pageController.run();
    });
}
<h1 class="remoteTaskQueueMonitoring__header">Task list</h1>
@{
    var searchPanelModel = htmlModel.SearchPanel;
}
<div class="remoteTaskQueueMonitoring__filter">
    <div class="remoteTaskQueueMonitoring__filter__label">State</div>
    <div class="remoteTaskQueueMonitoring__filter__field">
        @foreach (var state in searchPanelModel.States)
        {
            <div class="remoteTaskQueueMonitoring__filter__field__items">
                @Html.Input(state.Key)
                @Html.Checkbox(state.Value)
            </div>
        }
    </div>
</div>
<div class="remoteTaskQueueMonitoring__filter">
    <div class="remoteTaskQueueMonitoring__filter__label">TaskId</div>
    <div class="remoteTaskQueueMonitoring__filter__field remoteTaskQueueMonitoring__filter__field_type_big">@Html.Input(searchPanelModel.TaskId)</div>
</div>
<div class="remoteTaskQueueMonitoring__filter">
    <div class="remoteTaskQueueMonitoring__filter__label">ParentTaskId</div>
    <div class="remoteTaskQueueMonitoring__filter__field remoteTaskQueueMonitoring__filter__field_type_big">@Html.Input(searchPanelModel.ParentTaskId)</div>
</div>
@{
    if (searchPanelModel.TaskName != null)
    {
        <div class="remoteTaskQueueMonitoring__filter">
            <div class="remoteTaskQueueMonitoring__filter__label">TaskName</div>
            <div class="remoteTaskQueueMonitoring__filter__field">@Html.Select(searchPanelModel.TaskName)</div>
        </div>
    }
}
<div class="remoteTaskQueueMonitoring__filter">
    <div class="remoteTaskQueueMonitoring__filter__label">Ticks From</div>
    <div class="remoteTaskQueueMonitoring__filter__field">@Html.DateAndTime(searchPanelModel.Ticks.From)</div>
    <div class="remoteTaskQueueMonitoring__filter__label">Ticks To</div>
    <div class="remoteTaskQueueMonitoring__filter__field">@Html.DateAndTime(searchPanelModel.Ticks.To)</div>
</div>
<div class="remoteTaskQueueMonitoring__filter">
    <div class="remoteTaskQueueMonitoring__filter__label">StartExecutedTicks From</div>
    <div class="remoteTaskQueueMonitoring__filter__field">@Html.DateAndTime(searchPanelModel.StartExecutedTicks.From)</div>
    <div class="remoteTaskQueueMonitoring__filter__label">StartExecutedTicks To</div>
    <div class="remoteTaskQueueMonitoring__filter__field">@Html.DateAndTime(searchPanelModel.StartExecutedTicks.To)</div>
</div>
<div class="remoteTaskQueueMonitoring__filter">
    <div class="remoteTaskQueueMonitoring__filter__label">FinishExecutedTicks From</div>
    <div class="remoteTaskQueueMonitoring__filter__field">@Html.DateAndTime(searchPanelModel.FinishExecutedTicks.From)</div>
    <div class="remoteTaskQueueMonitoring__filter__label">FinishExecutedTicks To</div>
    <div class="remoteTaskQueueMonitoring__filter__field">@Html.DateAndTime(searchPanelModel.FinishExecutedTicks.To)</div>
</div>
<div class="remoteTaskQueueMonitoring__filter">
    <div class="remoteTaskQueueMonitoring__filter__label">MinimalStartTicks From</div>
    <div class="remoteTaskQueueMonitoring__filter__field">@Html.DateAndTime(searchPanelModel.MinimalStartTicks.From)</div>
    <div class="remoteTaskQueueMonitoring__filter__label">MinimalStartTicks To</div>
    <div class="remoteTaskQueueMonitoring__filter__field">@Html.DateAndTime(searchPanelModel.MinimalStartTicks.To)</div>
</div>
<div class="remoteTaskQueueMonitoring__button">@Html.ActionButton(searchPanelModel.SearchButton)</div>

<div class="context_novis"> Найдено: @Html.Text(htmlModel.TaskCount)</div>
<table class="remoteTaskQueueMonitoring__data">
    <tr>
        <th class="remoteTaskQueueMonitoring__data__header">TaskId</th>
        <th class="remoteTaskQueueMonitoring__data__header">TaskState</th>
        <th class="remoteTaskQueueMonitoring__data__header">TaskName</th>
        <th class="remoteTaskQueueMonitoring__data__header">EnqueueTicks</th>
        <th class="remoteTaskQueueMonitoring__data__header">StartExecutedTicks</th>
        <th class="remoteTaskQueueMonitoring__data__header">FinishExecutedTicks</th>
        <th class="remoteTaskQueueMonitoring__data__header">MinimalStartTicks</th>
        <th class="remoteTaskQueueMonitoring__data__header">Attempts</th>
        <th class="remoteTaskQueueMonitoring__data__header remoteTaskQueueMonitoring__last">ParentTaskId</th>
    </tr>
    @{
        foreach(var taskModel in htmlModel.Tasks)
        {
            <tr class="remoteTaskQueueMonitoring__data__item remoteTaskQueueMonitoring__data__item_state_@(taskModel.TaskState.Value)">
                <td class="remoteTaskQueueMonitoring__data__col remoteTaskQueueMonitoring__data__col_type_id">
                    @Html.TaskId(taskModel.TaskId)
                </td>
                <td class="remoteTaskQueueMonitoring__data__col">
                    @Html.TaskState(taskModel.TaskState)
                </td>
                <td class="remoteTaskQueueMonitoring__data__col">
                    @Html.Text(taskModel.TaskName)
                </td>
                <td class="remoteTaskQueueMonitoring__data__col">
                    @Html.TaskDateTime(taskModel.EnqueueTime)
                </td>
                <td class="remoteTaskQueueMonitoring__data__col">
                    @Html.TaskDateTime(taskModel.StartExecutingTime)
                </td>
                <td class="remoteTaskQueueMonitoring__data__col">
                    @Html.TaskDateTime(taskModel.FinishExecutingTime)
                </td>
                <td class="remoteTaskQueueMonitoring__data__col">
                    @Html.TaskDateTime(taskModel.MinimalStartTime)
                </td>
                <td class="remoteTaskQueueMonitoring__data__col">
                    @Html.Text(taskModel.Attempts)
                </td>
                <td class="remoteTaskQueueMonitoring__data__col remoteTaskQueueMonitoring__last remoteTaskQueueMonitoring__data__col_type_id">
                    @Html.TaskId(taskModel.ParentTaskId)
                </td>
            </tr>
        }
    }
</table>
@Html.Selects(Model.GetAllSelects())
<div class="remoteTaskQueueMonitoring__paginator">
    @Html.Paginator(Model.PaginatorModelData)
</div>
