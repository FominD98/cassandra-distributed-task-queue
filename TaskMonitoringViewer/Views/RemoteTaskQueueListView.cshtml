@using SKBKontur.Catalogue.Core.Web.Blocks.Button
@using SKBKontur.Catalogue.RemoteTaskQueue.TaskMonitoringViewer.RenderingHelpers
@using SKBKontur.Catalogue.Core.Web.RenderingHelpers
@using SKBKontur.Catalogue.RemoteTaskQueue.TaskMonitoringViewer.Models
@using SKBKontur.Catalogue.RemoteTaskQueue.TaskMonitoringViewer.Models.Html
@model RemoteTaskQueueModel
@{
    SearchPanelHtmlModel htmlModel = Model.HtmlModel;
    Layout = "TaskMonitoringLayout.cshtml";
}
@* ReSharper disable Razor.SectionNotResolved *@
@section Title {
    Task list
}
@* ReSharper restore Razor.SectionNotResolved *@
@section Scripts{
    var PageOptions = {
    functions: @Html.Raw(Model.GetJSFunctions())
    };
    $(document).ready(function() {
    var pageController = new Page("AdminTools","RemoteTaskQueue");
    pageController.run();
    });
}
<h1>
    Task list</h1>
<div id="TaskMonitoringSearchPanel">
    <div id="searchDiv">
        @{
            <div>
                <div>State</div>
                <div class="context_novis">
                    @foreach (var state in htmlModel.States)
                    {
                        @Html.Input(state.Key)
                        @Html.Checkbox(state.Value)
                    }
                </div>
            </div>
            if (htmlModel.TaskName != null)
            {
                <div>
                    <div>TaskName</div>
                    <div class="context_novis">@Html.Select(htmlModel.TaskName)</div>
                </div>
            }
            <div>
                <div>Ticks</div>
                <div>From Date & Time</div>
                <div class="context_novis">@Html.DateAndTime(htmlModel.Ticks.From)</div>
                <div>To Date & Time</div>
                <div class="context_novis">@Html.DateAndTime(htmlModel.Ticks.To)</div>
            </div>
            <div>
                <div>StartExecutedTicks</div>
                <div>From Date & Time</div>
                <div class="context_novis">@Html.DateAndTime(htmlModel.StartExecutedTicks.From)</div>
                <div>To Date & Time</div>
                <div class="context_novis">@Html.DateAndTime(htmlModel.StartExecutedTicks.To)</div>
            </div>
            <div>
                <div>MinimalStartTicks</div>
                <div>From Date & Time</div>
                <div class="context_novis">@Html.DateAndTime(htmlModel.MinimalStartTicks.From)</div>
                <div>To Date & Time</div>
                <div class="context_novis">@Html.DateAndTime(htmlModel.MinimalStartTicks.To)</div>
            </div>
        }
        <div class="context_novis">@Html.Button(htmlModel.SearchButton)</div>
    </div>
</div>
<div>
    <table>
        <tr>
            <td>
                TaskId
            </td>
            <td>
                TaskState
            </td>
            <td>
                TaskName
            </td>
            <td>
                EnqueueTicks
            </td>
            <td>
                StartExecutedTicks
            </td>
            <td>
                MinimalStartTicks
            </td>
            <td>
                Attempts
            </td>
            <td>
                ParentTaskId
            </td>
        </tr>
        @{
            for (int index = 0; index < Model.Data.TaskModels.Length; index++)
            {
                var taskModel = Model.Data.TaskModels[index];
                // ReSharper disable Asp.NotResolved
                var detailsTaskUrl = @Url.Action("Show", "RemoteTaskQueue", new { id = taskModel.TaskId, pageNumber = Model.PageNumber, searchRequestId = Model.SearchRequestId });
                var detailsParentTaskUrl = @Url.Action("Show", "RemoteTaskQueue", new { id = taskModel.ParentTaskId, pageNumber = Model.PageNumber, searchRequestId = Model.SearchRequestId });
                // ReSharper restore Asp.NotResolved
                <tr id="Task[@index]">
                    <td id="TaskId[@index]">
                        <a href="@detailsTaskUrl">@taskModel.TaskId</a>
                    </td>

                    <td id="TaskState[@index]">
                        @Html.TaskState(taskModel)
                    </td>

                    <td id="TaskName[@index]">
                        @taskModel.Name
                    </td>

                    <td id="EnqueueTicks[@index]">
                        @taskModel.EnqueueTicks
                    </td>

                    <td id="StartExecutedTicks[@index]">
                        @taskModel.StartExecutedTicks
                    </td>

                    <td id="MinimalStartTicks[@index]">
                        @taskModel.MinimalStartTicks
                    </td>

                    <td id="Attempts[@index]">
                        @taskModel.Attempts
                    </td>
                    <td id="ParentTaskId[@index]">
                        <a href="@detailsParentTaskUrl">@taskModel.ParentTaskId</a>
                    </td>
                </tr>
            }
        }
    </table>
</div>
@Html.Selects(Model.GetAllSelects())
@Html.Paginator(Model)
