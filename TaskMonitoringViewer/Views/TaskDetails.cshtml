
\@using System.Linq
@using SKBKontur.Catalogue.Core.Web.Blocks.AdminTools.AdminToolsHeader
@using SKBKontur.Catalogue.Core.Web.Blocks.AdminTools.AdminTaskId
@using SKBKontur.Catalogue.Core.Web.Blocks.AdminTools.AdminTaskState
@using SKBKontur.Catalogue.Core.Web.Blocks.AdminTools.AdminToolsDetails
@using SKBKontur.Catalogue.RemoteTaskQueue.TaskMonitoringViewer.Models.TaskDetails
@model TaskDetailsPageModel
@{
    Layout = "TaskMonitoringLayout.cshtml";
}
@{
    var htmlModel = Model.HtmlModel;
}

@* ReSharper disable Razor.SectionNotResolved *@
@section Title {
    @Model.Title
}
@* ReSharper restore Razor.SectionNotResolved *@

@section Scripts{
    var PageOptions = @Html.Raw(Model.GetPageOptions());
    $(document).ready(function() {
        var pageController = new Page();
        pageController.run();
    });
}
@Html.AdminToolsHeader(new AdminToolsHeaderHtmlModel
    {
        Text = Model.Title,
        BackText = "вернуться к списку задач",
        BackUrl = Url.Action("Run", "RemoteTaskQueue")
    })
<div class="adminTools__details__container">
    <table class="adminTools__details">
        @Html.AdminToolsDetailsItem(new AdminToolsDetailsItemHtmlModel
        {
            Label = "TaskId",
            TaskId = new AdminTaskIdHtmlModel
                {
                    Id = htmlModel.TaskMetaInfo.TaskId.Id,
                    Url = htmlModel.TaskMetaInfo.TaskId.GetDetailsUrl(Url),
                    Value = htmlModel.TaskMetaInfo.TaskId.Value
                }
        })
        @Html.AdminToolsDetailsItem(new AdminToolsDetailsItemHtmlModel
        {
            Label = "TaskState",
            State = new AdminTaskStateHtmlModel
                {
                    Id = htmlModel.TaskMetaInfo.TaskState.Id,
                    CancelUrl = htmlModel.TaskMetaInfo.TaskState.GetCancelUrl(Url),
                    RerunUrl = htmlModel.TaskMetaInfo.TaskState.GetRerunUrl(Url),
                    State = htmlModel.TaskMetaInfo.TaskState.Value.ToString(),
                    CanCancel = htmlModel.TaskMetaInfo.TaskState.CanCancel
                }
        })
        @Html.AdminToolsDetailsItem(new AdminToolsDetailsItemHtmlModel
        {
            Label = "TaskName",
            Object = htmlModel.TaskMetaInfo.TaskName
        })
        @Html.AdminToolsDetailsItem(new AdminToolsDetailsItemHtmlModel
        {
            Label = "EnqueueTicks",
            Object = htmlModel.TaskMetaInfo.EnqueueTime
        })
        @Html.AdminToolsDetailsItem(new AdminToolsDetailsItemHtmlModel
        {
            Label = "StartExecutedTicks",
            Object = htmlModel.TaskMetaInfo.StartExecutingTime
        })
        @Html.AdminToolsDetailsItem(new AdminToolsDetailsItemHtmlModel
        {
            Label = "FinishExecutedTicks",
            Object = htmlModel.TaskMetaInfo.FinishExecutingTime
        })
        @Html.AdminToolsDetailsItem(new AdminToolsDetailsItemHtmlModel
        {
            Label = "MinimalStartTicks",
            Object = htmlModel.TaskMetaInfo.MinimalStartTime
        })
        @Html.AdminToolsDetailsItem(new AdminToolsDetailsItemHtmlModel
        {
            Label = "Attempts",
            Object = htmlModel.TaskMetaInfo.Attempts
        })
        @Html.AdminToolsDetailsItem(new AdminToolsDetailsItemHtmlModel
        {
            Label = "ParentTaskId",
            TaskId = new AdminTaskIdHtmlModel
                {
                    Id = htmlModel.TaskMetaInfo.ParentTaskId.Id,
                    Url = htmlModel.TaskMetaInfo.ParentTaskId.GetDetailsUrl(Url),
                    Value = htmlModel.TaskMetaInfo.ParentTaskId.Value
                }
        })
        @Html.AdminToolsDetailsItem(new AdminToolsDetailsItemHtmlModel
        {
            Label = "ChildTaskIds",
            TaskIds = htmlModel.ChildTaskIds.Select(x => new AdminTaskIdHtmlModel {Id = x.Id, Url = x.GetDetailsUrl(Url), Value = x.Value } ).ToArray()
        })
        @Html.AdminToolsDetailsItem(new AdminToolsDetailsItemHtmlModel
        {
            Label = "TaskGroupLock",
            Object = htmlModel.TaskMetaInfo.TaskGroupLock
        })
        @Html.AdminToolsDetailsItem(new AdminToolsDetailsItemHtmlModel
        {
            Label = "TaskData",
            IsLast = htmlModel.ExceptionInfo == null,
            Object = htmlModel.TaskDataValue
        })
        @{
            if (htmlModel.ExceptionInfo != null)
            {
                @Html.AdminToolsDetailsItem(new AdminToolsDetailsItemHtmlModel
                {
                    Label = "ExceptionInfo",
                    IsLast = true,
                    Object = htmlModel.ExceptionInfo
                })
            }
        }
    </table>
</div>